/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from '@payloadcms/db-vercel-postgres'
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  uuid,
  varchar,
  timestamp,
  boolean,
  numeric,
  serial,
  jsonb,
  pgEnum,
} from '@payloadcms/db-vercel-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-vercel-postgres/drizzle'
export const enum__locales = pgEnum('enum__locales', ['fr'])
export const enum_clients_origin = pgEnum('enum_clients_origin', ['france', 'suisse'])

export const admins_sessions = pgTable(
  'admins_sessions',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
    expiresAt: timestamp('expires_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
  },
  (columns) => ({
    _orderIdx: index('admins_sessions_order_idx').on(columns._order),
    _parentIDIdx: index('admins_sessions_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [admins.id],
      name: 'admins_sessions_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const admins = pgTable(
  'admins',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    fullname: varchar('fullname').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    enableAPIKey: boolean('enable_a_p_i_key'),
    apiKey: varchar('api_key'),
    apiKeyIndex: varchar('api_key_index'),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    admins_updated_at_idx: index('admins_updated_at_idx').on(columns.updatedAt),
    admins_created_at_idx: index('admins_created_at_idx').on(columns.createdAt),
    admins_email_idx: uniqueIndex('admins_email_idx').on(columns.email),
  }),
)

export const clients = pgTable(
  'clients',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    lastname: varchar('lastname').notNull(),
    firstname: varchar('firstname').notNull(),
    origin: enum_clients_origin('origin').notNull(),
    birthday: timestamp('birthday', { mode: 'string', withTimezone: true, precision: 3 }),
    last_visit: timestamp('last_visit', { mode: 'string', withTimezone: true, precision: 3 }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    clients_updated_at_idx: index('clients_updated_at_idx').on(columns.updatedAt),
    clients_created_at_idx: index('clients_created_at_idx').on(columns.createdAt),
  }),
)

export const custom = pgTable(
  'custom',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    custom_updated_at_idx: index('custom_updated_at_idx').on(columns.updatedAt),
    custom_created_at_idx: index('custom_created_at_idx').on(columns.createdAt),
  }),
)

export const mails = pgTable(
  'mails',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    client: uuid('client_id')
      .notNull()
      .references(() => clients.id, {
        onDelete: 'set null',
      }),
    rappel: timestamp('rappel', { mode: 'string', withTimezone: true, precision: 3 }).notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    mails_client_idx: index('mails_client_idx').on(columns.client),
    mails_updated_at_idx: index('mails_updated_at_idx').on(columns.updatedAt),
    mails_created_at_idx: index('mails_created_at_idx').on(columns.createdAt),
  }),
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: uuid('parent_id').notNull(),
    path: varchar('path').notNull(),
    adminsID: uuid('admins_id'),
    clientsID: uuid('clients_id'),
    customID: uuid('custom_id'),
    mailsID: uuid('mails_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_admins_id_idx: index(
      'payload_locked_documents_rels_admins_id_idx',
    ).on(columns.adminsID),
    payload_locked_documents_rels_clients_id_idx: index(
      'payload_locked_documents_rels_clients_id_idx',
    ).on(columns.clientsID),
    payload_locked_documents_rels_custom_id_idx: index(
      'payload_locked_documents_rels_custom_id_idx',
    ).on(columns.customID),
    payload_locked_documents_rels_mails_id_idx: index(
      'payload_locked_documents_rels_mails_id_idx',
    ).on(columns.mailsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    adminsIdFk: foreignKey({
      columns: [columns['adminsID']],
      foreignColumns: [admins.id],
      name: 'payload_locked_documents_rels_admins_fk',
    }).onDelete('cascade'),
    clientsIdFk: foreignKey({
      columns: [columns['clientsID']],
      foreignColumns: [clients.id],
      name: 'payload_locked_documents_rels_clients_fk',
    }).onDelete('cascade'),
    customIdFk: foreignKey({
      columns: [columns['customID']],
      foreignColumns: [custom.id],
      name: 'payload_locked_documents_rels_custom_fk',
    }).onDelete('cascade'),
    mailsIdFk: foreignKey({
      columns: [columns['mailsID']],
      foreignColumns: [mails.id],
      name: 'payload_locked_documents_rels_mails_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: uuid('parent_id').notNull(),
    path: varchar('path').notNull(),
    adminsID: uuid('admins_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_admins_id_idx: index('payload_preferences_rels_admins_id_idx').on(
      columns.adminsID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    adminsIdFk: foreignKey({
      columns: [columns['adminsID']],
      foreignColumns: [admins.id],
      name: 'payload_preferences_rels_admins_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const relations_admins_sessions = relations(admins_sessions, ({ one }) => ({
  _parentID: one(admins, {
    fields: [admins_sessions._parentID],
    references: [admins.id],
    relationName: 'sessions',
  }),
}))
export const relations_admins = relations(admins, ({ many }) => ({
  sessions: many(admins_sessions, {
    relationName: 'sessions',
  }),
}))
export const relations_clients = relations(clients, () => ({}))
export const relations_custom = relations(custom, () => ({}))
export const relations_mails = relations(mails, ({ one }) => ({
  client: one(clients, {
    fields: [mails.client],
    references: [clients.id],
    relationName: 'client',
  }),
}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    adminsID: one(admins, {
      fields: [payload_locked_documents_rels.adminsID],
      references: [admins.id],
      relationName: 'admins',
    }),
    clientsID: one(clients, {
      fields: [payload_locked_documents_rels.clientsID],
      references: [clients.id],
      relationName: 'clients',
    }),
    customID: one(custom, {
      fields: [payload_locked_documents_rels.customID],
      references: [custom.id],
      relationName: 'custom',
    }),
    mailsID: one(mails, {
      fields: [payload_locked_documents_rels.mailsID],
      references: [mails.id],
      relationName: 'mails',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    adminsID: one(admins, {
      fields: [payload_preferences_rels.adminsID],
      references: [admins.id],
      relationName: 'admins',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))

type DatabaseSchema = {
  enum__locales: typeof enum__locales
  enum_clients_origin: typeof enum_clients_origin
  admins_sessions: typeof admins_sessions
  admins: typeof admins
  clients: typeof clients
  custom: typeof custom
  mails: typeof mails
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  relations_admins_sessions: typeof relations_admins_sessions
  relations_admins: typeof relations_admins
  relations_clients: typeof relations_clients
  relations_custom: typeof relations_custom
  relations_mails: typeof relations_mails
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
}

declare module '@payloadcms/db-vercel-postgres' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
